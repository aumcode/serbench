nfx
{
  application-name="MsgBatching" 
  
  //The output of this tool will be directed into the value of SERBENCH_OUTPUT_ROOT
  //OS environment variable. Please set it up via Windows/ControlPanel/System....
  output-root-path=$(~SERBENCH_OUTPUT_ROOT) 
  
 
 
  //Configure data store where the results will be saved
  data-store
  {
    type="Serbench.Data.DefaultDataStore, Serbench"
    root-path=$(/$output-root-path) 
    output-web=true
    output-json=true
    output-csv=true
  } 
 
    
    testing-system
    {
    //type="your custom type inject your testing system if you want, by default it will use the one supplied within SerBench  " 

      
        tests
        {
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="Warmup Person" 
             order=000
             runs=1 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=1
             msg-type=Personal
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="Warmup RPC" 
             order=001
             runs=1 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=1
             msg-type=RPC
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="Warmup Trading" 
             order=002
             runs=1 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=1
             msg-type=Trading
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="Warmup EDI" 
             order=003
             runs=1 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=1
             msg-type=EDI
            }
            
            
            //==============================================================
          
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="Personal Count: 100" 
             order=100
             runs=100 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=100
             msg-type=Personal
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="Personal Count: 1000" 
             order=110
             runs=100 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=1000
             msg-type=Personal
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="Personal Count: 5000" 
             order=120
             runs=50 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=5000
             msg-type=Personal
            }

            
            //==================================
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="RPC Count: 100" 
             order=200
             runs=100 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=100
             msg-type=RPC
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="RPC Count: 1000" 
             order=210
             runs=100 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=1000
             msg-type=RPC
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="RPC Count: 5000" 
             order=220
             runs=50 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=5000
             msg-type=RPC
            }
            
            
             //==================================
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="Trading Count: 100" 
             order=300
             runs=200 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=100
             msg-type=Trading
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="Trading Count: 1000" 
             order=310
             runs=200 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=1000
             msg-type=Trading
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="Trading Count: 5000" 
             order=320
             runs=100 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=5000
             msg-type=Trading
            }
            
            //======================================
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="EDI Count: 10" 
             order=400
             runs=100 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=10
             msg-type=EDI
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="EDI Count: 100" 
             order=410
             runs=50 
             ser-iterations=1 
             deser-iterations=1 
             
             msg-count=100
             msg-type=EDI
            }
            
            test
            { 
             type="Serbench.Specimens.Tests.MsgBatching, Serbench.Specimens" 
             name="EDI Count: 200" 
             order=420
             runs=25 
             ser-iterations=1 
             deser-iterations=1
             
             msg-count=200
             msg-type=EDI
            }
            
        }//tests     
     
     
    serializers
    {
        // Stock serializers: they use only Microsoft .NET libraries
          
        serializer
		{ 
			type="Serbench.StockSerializers.MSBinaryFormatter, Serbench"
			name="MS.BinaryFormatter"
			order=10
		}        
        
        /* It does not support batching
        serializer 
        {
			type="Serbench.StockSerializers.MSDataContractSerializer, Serbench"
			name="MS.DataContractSerializer"
			order=30
		}
        */
       

        serializer
        {
          type="Serbench.StockSerializers.NFXSlim, Serbench"
          name="NFX.Slim Default" 
          order=70
        }
        
        serializer
        {
          type="Serbench.StockSerializers.NFXSlim, Serbench"
          name="NFX.Slim Batching" 
          order=78
          batching=true
        }

	    
        // Specimens serializers: they require additional libraries
        //------------------------------------------------------------------------------------------
	

		
 
 		serializer
        {
          type="Serbench.Specimens.Serializers.ProtoBufSerializer, Serbench.Specimens"
          name="ProtoBuf" 
          order=220
        }
		

        
    serializer
        {
          type="Serbench.Specimens.Serializers.WireSerializer, Serbench.Specimens"
          name="WireSerializer" 
          order=250
        }
        
   } //serializers

 }//testing-system
 
 
    log
    { 
        destination
        { 
           type="NFX.Log.Destinations.ConsoleDestination, NFX"
           colored=true
        }
        
        destination
        {  
           type="NFX.Log.Destinations.CSVFileDestination, NFX"
           name="SerbenchLog"
           path=$(/$output-root-path) 
           name-time-format='yyyyMMdd'
           generate-failover-msg=false
        }
    }
  
}