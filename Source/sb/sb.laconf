nfx
{
  application-name="Run All Default" 
  
  //The output of this tool will be directed into the value of SERBENCH_OUTPUT_ROOT
  //OS environment variable. Please set it up via Windows/ControlPanel/System....
  output-root-path=$(~SERBENCH_OUTPUT_ROOT) 
  
 
 
  //Configure data store where the results will be saved
  data-store
  {
    type="Serbench.Data.DefaultDataStore, Serbench"
    root-path=$(/$output-root-path) 
    output-web=true
    output-json=true
    output-csv=true
  } 
 
    
    testing-system
    {
    //type="your custom type inject your testing system if you want, by default it will use the one supplied within SerBench  " 

      
        tests
        {
                    // DICTIONARIES:
                    test { type="Serbench.StockTests.SimpleDictionaryStringObject, Serbench" name="SimpleDict(10,1)"   order=100 key-length=10 count=1}
                    test { type="Serbench.StockTests.SimpleDictionaryStringObject, Serbench" name="SimpleDict(10,10)"  order=101 key-length=10 count=10}
                    test { type="Serbench.StockTests.SimpleDictionaryStringObject, Serbench" name="SimpleDict(10,64)"  order=102 key-length=10 count=64}
                    test { type="Serbench.StockTests.SimpleDictionaryStringObject, Serbench" name="SimpleDict(300,10)" order=103 key-length=300 count=10}
                    test { type="Serbench.StockTests.SimpleDictionaryStringObject, Serbench" name="SimpleDict(300,64)" order=104 key-length=300 count=64}   
                    
                    
                    //// ARRAYS:
                    //Integer arrays
                    test { type="Serbench.StockTests.ArrayOfInt, Serbench" name="int[10]" order=300 dimensions="10"}
                    test { type="Serbench.StockTests.ArrayOfInt, Serbench" name="int[10,10]" order=301 dimensions="10,10"}
                    test { type="Serbench.StockTests.ArrayOfInt, Serbench" name="int[10,10,2]" order=302 dimensions="10,10,2"}
                    test { type="Serbench.StockTests.ArrayOfInt, Serbench" name="int[10] full range" order=303 dimensions="10" min="-2000000000" max="2000000000" }
                    
                    //String Arrays
                    test { type="Serbench.StockTests.ArrayOfString, Serbench" name="string[10]" order=310 dimensions="10" string-size=50}
                    test { type="Serbench.StockTests.ArrayOfString, Serbench" name="string[10,10]" order=311 dimensions="10,10" string-size=50}
                    
                    //Decimal Arrays
                    test { type="Serbench.StockTests.ArrayOfDecimal, Serbench" name="decimal[10]" order=320 dimensions="10" }
                    
                    //Double Arrays
                    test { type="Serbench.StockTests.ArrayOfDouble, Serbench" name="double[10]" order=330 dimensions="10"}
                 
                    //Nullable Int Arrays    
                    test { type="Serbench.StockTests.ArrayOfNullableInt, Serbench" name="int?[10]" order=340 dimensions="10"}
                    test { type="Serbench.StockTests.ArrayOfNullableInt, Serbench" name="int?[10] full range" order=341 dimensions="10" min="-2000000000" max="2000000000" }
                 
                    // Classes:
                    test { type="Serbench.StockTests.TypicalPerson, Serbench" name="StockTests TypicalPerson(single)" order=400 list=false runs=30}
                    test { type="Serbench.StockTests.TypicalPerson, Serbench" name="StockTests TypicalPerson(list, 10)" order=401 list=true count=10}
                    test
                    { 
                       type="Serbench.StockTests.TypicalPerson, Serbench" name="StockTests TypicalPerson(list, 20)" order=401 list=true count=20
                       serializer-setup
                       {
                         avro
                         {
                           schema=$"sdfs
                           ddf
                           gd
                           fg
                           df
                           gd
                           fg
                           d
                           fg
                           df
                           g
                           df
                           g
                           df
                           g
                           df
                           g
                           lfjlkslfjlfk"
                         } 
                         another{}
                       }
                    }

                    test { type="Serbench.Specimens.Tests.TypicalPerson, Serbench.Specimens" name="Specimens TypicalPerson(single)" order=410 list=false runs=30}
                    test { type="Serbench.Specimens.Tests.TypicalPerson, Serbench.Specimens" name="Specimens TypicalPerson(list, 10)" order=411 list=true count=10}
                    test { type="Serbench.Specimens.Tests.TypicalPerson, Serbench.Specimens" name="Specimens TypicalPerson(list, 20)" order=411 list=true count=20}
     
        }//tests     
     
     
    serializers
    {
        // Stock serializers: they use only Microsoft .NET libraries
          
        serializer
		{ 
			type="Serbench.StockSerializers.MSBinaryFormatter, Serbench"
			name="MS.BinaryFormatter"
			order=10
		}        
        
		serializer
		{
			type="Serbench.StockSerializers.MSDataContractJsonSerializer, Serbench"
			name="MS.DataContractJsonSerializer"
			order=20
			known-type{name="Serbench.StockTests.TypicalPerson"}
			// known-type{name="System.Collections.Generic.List`1[Serbench.StockTests.TypicalPerson]"}
			// known-type{name="Serbench.StockTests.MaritalStatus"}
			known-type{name="Serbench.Specimens.Tests.TypicalPerson, Serbench.Specimens"}
		}
		

		serializer 
        {
			type="Serbench.StockSerializers.MSDataContractSerializer, Serbench"
			name="MS.DataContractSerializer"
			order=30
			known-type{name="Serbench.StockTests.TypicalPerson"}
			// known-type{name="System.Collections.Generic.List`1[Serbench.StockTests.TypicalPerson]"}
			// known-type{name="Serbench.StockTests.MaritalStatus"}
			known-type{name="Serbench.Specimens.Tests.TypicalPerson, Serbench.Specimens"}
		}

        serializer
        {
          type="Serbench.StockSerializers.MSJavaScriptSerializer, Serbench"
          name="MS.JavaScriptSerializer" 
 		  //known-type{name="Serbench.StockTests.TypicalPerson"}
          // known-type{name="System.Collections.Generic.List`1[Serbench.StockTests.TypicalPerson]"}
		  // known-type{name="Serbench.StockTests.MaritalStatus"}
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
         order=40
        }

       serializer
        {
          type="Serbench.StockSerializers.MSXmlSerializer, Serbench"
          name="MS.XmlSerializer" 
 		  //known-type{name="Serbench.StockTests.TypicalPerson"}
          // known-type{name="System.Collections.Generic.List`1[Serbench.StockTests.TypicalPerson]"}
		  // known-type{name="Serbench.StockTests.MaritalStatus"}
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
         order=50
        }

        serializer
        {
          type="Serbench.StockSerializers.NFXJson, Serbench"
          name="NFX.Json Default" 
          order=60
        }
        
        serializer
        {
          type="Serbench.StockSerializers.NFXJson, Serbench"
          name="NFX.Json Pretty Print" 
          order=65
          options
          {
           IndentWidth = 2
           ObjectLineBreak = true
           MemberLineBreak = true
           SpaceSymbols = true
           ASCIITarget = false
          }
        }

        serializer
        {
          type="Serbench.StockSerializers.NFXSlim, Serbench"
          name="NFX.Slim Default" 
          order=70
        }
     
        serializer
        {
          type="Serbench.StockSerializers.NFXSlim, Serbench"
          name="NFX.Slim Known Types" 
          order=78
          _include { file="knowntypes.StockTypicalPerson.laconf"} //include file contents
        }

	    
        // Specimens serializers: they require additional libraries
        //------------------------------------------------------------------------------------------
		serializer
        {
          type="Serbench.Specimens.Serializers.ApJsonSerializer, Serbench.Specimens"
          name="Apolyton.FastJson" 
          order=110
        }

        serializer
        {
          type="Serbench.Specimens.Serializers.FastJsonSerializer, Serbench.Specimens"
          name="FastJson" 
          order=130
        }

       
      //WARNING!  This serializer HANGS! And consumes 64Gb RAM than crashes while trying to serialize STRING[10]
      // aY-YA-YAY!      
        serializer
        {
          type="Serbench.Specimens.Serializers.HaveBoxJSON, Serbench.Specimens"
          name="HaveBoxJSON" 
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
          order=140
          
          not-supported-abort-message="This serializer HANGS! And consumes 64Gb RAM than crashes while trying to serialize STRING[10]"
        }
	

        serializer
        {
          type="Serbench.Specimens.Serializers.JilSerializer, Serbench.Specimens"
          name="Jil" 
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
          order=150
        }

        serializer
        {
          type="Serbench.Specimens.Serializers.JsonFxSerializer, Serbench.Specimens"
          name="JsonFx" 
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
          order=160
        }

		serializer
        {
          type="Serbench.Specimens.Serializers.JsonNet, Serbench.Specimens"
          name="Json.Net" 
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
          order=170
        }

		serializer
        {
          type="Serbench.Specimens.Serializers.MessageSharkSerializer, Serbench.Specimens"
          name="MessageShark" 
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
          order=180
        }

	
		// TODO: hungs up the application. Ctrl-C works.
		serializer
        {
          type="Serbench.Specimens.Serializers.MsgPackSerializer, Serbench.Specimens"
          name="MsgPack" 
          order=190
        }
	

		serializer
        {
          type="Serbench.Specimens.Serializers.NetJSONSerializer, Serbench.Specimens"
          name="NetJSONS" 
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
          order=200
        }


		serializer
        {
          type="Serbench.Specimens.Serializers.NetSerializerSer, Serbench.Specimens"
          name="NetSerializer" 
          //_include { file="knowntypes.StockTypicalPerson.laconf"} //include file contents
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
          order=210
        }

 
 		serializer
        {
          type="Serbench.Specimens.Serializers.ProtoBufSerializer, Serbench.Specimens"
          name="ProtoBuf" 
          //_include { file="knowntypes.StockTypicalPerson.laconf"} //include file contents
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
          order=220
        }

		serializer
        {
          type="Serbench.Specimens.Serializers.ServiceStackJsonSerializer, Serbench.Specimens"
          name="ServiceStack.JsonSerializer" 
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
          order=230
        }

		serializer
        {
          type="Serbench.Specimens.Serializers.ServiceStackTypeSerializer, Serbench.Specimens"
          name="ServiceStack.TypeSerializer" 
          known-type{name="Serbench.Specimens.Tests.TypicalPersonData, Serbench.Specimens"}
          order=235
        }


		serializer
        {
          type="Serbench.Specimens.Serializers.SharpSerializer, Serbench.Specimens"
          name="SharpSerializer" 
          order=240
          
          not-supported-abort-message="Strange behaviour - near-zero unrealistic payloads and infinite speeds"
        }

        
   } //serializers

 }//testing-system
 
 
    log
    { 
        destination
        { 
           type="NFX.Log.Destinations.ConsoleDestination, NFX"
           colored=true
        }
        
        destination
        {  
           type="NFX.Log.Destinations.CSVFileDestination, NFX"
           name="SerbenchLog"
           path=$(/$output-root-path) 
           name-time-format='yyyyMMdd'
           generate-failover-msg=false
        }
    }
  
}