nfx
{
 
  //Configure data store where the results will be saved
  data-store
  {
    type="Serbench.Data.DefaultDataStore, Serbench"
    root-path="c:\\nfx"
  }
  
   
 
 
    
    testing-system
    {
    //type="your custom type inject your testing system if you want, by default it will use the one supplied within SerBench  " 
     

        test { type="Serbench.StockTests.SimpleDictionaryStringObject, Serbench" name="SimpleDict(10,1)"   order=100 key-length=10 count=1}
        test { type="Serbench.StockTests.SimpleDictionaryStringObject, Serbench" name="SimpleDict(10,10)"  order=101 key-length=10 count=10}
        test { type="Serbench.StockTests.SimpleDictionaryStringObject, Serbench" name="SimpleDict(10,64)"  order=102 key-length=10 count=64}
        test { type="Serbench.StockTests.SimpleDictionaryStringObject, Serbench" name="SimpleDict(300,10)" order=103 key-length=300 count=10}
        test { type="Serbench.StockTests.SimpleDictionaryStringObject, Serbench" name="SimpleDict(300,64)" order=104 key-length=300 count=64}
        
        
        test { type="Serbench.StockTests.TypicalPerson, Serbench" name="TypicalPerson(single)" order=200 list=false runs=100}
        test { type="Serbench.StockTests.TypicalPerson, Serbench" name="TypicalPerson(list, 10)" order=201 list=true count=10}
        test { type="Serbench.StockTests.TypicalPerson, Serbench" name="TypicalPerson(list, 20)" order=201 list=true count=20}
        
     
     
     
        serializer
        {
          type="Serbench.StockSerializers.NFXSlim, Serbench"
          name="NFX.Slim Default" 
          order=0
        }
        
        serializer
        {
          type="Serbench.StockSerializers.NFXSlim, Serbench"
          name="NFX.Slim Batching" 
          order=1
          batching=true
        }
        
        serializer
        {
          type="Serbench.StockSerializers.NFXSlim, Serbench"
          name="NFX.Slim Known Types" 
          order=2
          //known-type{name="full..type..name"}
          //known-type{name="full..type..name"}
        }
          
        serializer{ type="Serbench.StockSerializers.MSBinaryFormatter, Serbench" name="MS.BinaryFormatter" order=100}
        
        
        serializer
        {
          type="Serbench.StockSerializers.NFXJson, Serbench"
          name="NFX.Json Default" 
          order=200
        }
        
        serializer
        {
          type="Serbench.StockSerializers.NFXJson, Serbench"
          name="NFX.Json Pretty Print" 
          order=210
          options
          {
           IndentWidth = 2
           ObjectLineBreak = true
           MemberLineBreak = true
           SpaceSymbols = true
           ASCIITarget = false
          }
        }
    }
 
 
    log
    {
        destination { type="NFX.Log.Destinations.ConsoleDestination, NFX" colored=true}
    }
}