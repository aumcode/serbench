#<laconf>
  compiler
  {
    base-class-name="Serbench.WebViewer.Master"
    namespace="Serbench.WebViewer"
    abstract="false"
    summary="Index navigation of test results"

    using{ns="NFX.Web"}
    using{ns="NFX.Wave"}
    using{ns="NFX.Wave.Templatization"}
  }
#</laconf>
#[class]

#[override renderHeader()]

#[override renderBody()]

<link rel="stylesheet" type="text/css" href="styles/overview-table.css">

<div class="main-container">
    <div class="report-header">
        <h1>Overview: aggregate information about different serializers tests</h1>
    </div>
    <div id="overview-table"></div>
</div>





<script>      
    
    // globals
    var columnHeaders;
    var rowHeaders;
    var topOffset;
    var leftOffset;
    var speedColors = [
              '#ff7060',
              '#ff9070',
              '#ffa060',
              '#ffb050',
              '#ffc040',
              '#ffd030',
              '#e0e030',
              '#d0f030',
              '#c0ff30',
              '#c0ff70',
              '#c0ffA0',
              '#c0ffC0',
              '#b0ffE0',
              '#a0ffF0',
              '#80ffFF'];

    $(function () {

        var data = WAVE.arrayWalkable(window.data_TestRunData);
        var table = createOverviewTable(data);
        var container = $("#overview-table")[0];
        container.appendChild(table);

        initializeGlobals();
    });

    function initializeGlobals() {

        columnHeaders = $('.main-table-column-header');
        rowHeaders = $('.main-table-row-header');
        topOffset = parseInt(columnHeaders.offset().top);
        leftOffset = parseInt(rowHeaders.offset().left);
    }

    function createOverviewTable(data) {

        var table = document.createElement('table');
        var headersInfo = createTableHeader(data, table);
        createTableRows(data, table, headersInfo);
        table.className = 'main-table';

        return table;
    };

    function createTableHeader(data, table) {

        // create header row, append 1st empty cell
        var thead = document.createElement('thead');
        var tr = document.createElement('tr');
        var th = document.createElement('th');
        th.className = 'corner-cell';
        tr.appendChild(th);
        thead.appendChild(tr);

        var headersInfo = [];

        // create other header cells
        data.wSelect(function (e) { return getColumnHeaderData(e); })
            .wDistinct(function (a, b) { return a.serializerType == b.serializerType && a.serializerName == b.serializerName; })
            .wEach(function (h) {
                // insert column header cell
                var th = document.createElement("th");
                th.className = 'main-table-column-header';
                var htmlTemplate = "<b>@serializerName@</b><br>@serializerType@";
                th.innerHTML = WAVE.strHTMLTemplate(htmlTemplate, { serializerType: h.serializerType, serializerName: h.serializerName });
                tr.appendChild(th);

                // populate header info
                headersInfo.push(h);
            });

        table.appendChild(thead);

        return headersInfo;
    }

    function createTableRows(data, table, headersInfo) {

        var tbody = document.createElement('tbody');

        data.wSelect(function (e) { return getRowHeaderData(e); })
            .wDistinct(function (a, b) { return a.testType == b.testType && a.testName == b.testName; })
            .wEach(function (r) {
                // prepare cell data
                var cellDatas = WAVE.arrayWalkable(headersInfo)
                                    .wSelect(function (h) { return getCellData(data, r, h); })
                                    .wToArray();
                // create row, insert first cell (row header)
                var tr = createRow(r, cellDatas);

                // prepare row aggregate & statistics data
                var metaData = prepareRowMetadata(cellDatas);

                // fill table cells
                WAVE.arrayWalkable(cellDatas).wEach(function (d) {
                    createTableCell(d, tr, metaData);
                });

                tbody.appendChild(tr);
            });

        table.appendChild(tbody);
    }

    function getCellData(data, rowHeaderInfo, columnHeaderInfo) {

        // seek for all tests with the same column's and row's header data
        var benchTests = data.wWhere(function (t) {
            return t.TestType == rowHeaderInfo.testType &&
                t.TestName == rowHeaderInfo.testName &&
                t.SerializerType == columnHeaderInfo.serializerType &&
                t.SerializerName == columnHeaderInfo.serializerName;
        });

        // if there is no test - fill cell with empty (gray) space
        if (!benchTests.wAny()) {
            return null;
        }

        var benchTest = benchTests.wFirst();

        // if there are many tests, calculate avarage data
        var count = benchTests.wCount();
        if (count > 1) {
            benchTests.wSkip(1).wEach(function (t) {
                benchTest.PayloadSize += t.PayloadSize;
                benchTest.SerExceptions += t.SerExceptions;
                benchTest.SerAborts += t.SerAborts;
                benchTest.SerDurationMs += t.SerDurationMs;
                benchTest.SerOpsSec += t.SerOpsSec;
                benchTest.DeserExceptions += t.DeserExceptions;
                benchTest.DeserAborts += t.DeserAborts;
                benchTest.DeserDurationMs += t.DeserDurationMs;
                benchTest.DeserOpsSec += t.DeserOpsSec;
            });
            benchTest.SerDurationMs = benchTest.SerDurationTicks / 1000;
            benchTest.SerOpsSec /= count;
            benchTest.DeserDurationMs = benchTest.DeserDurationTicks / 1000;
            benchTest.DeserOpsSec /= count;
        }
        benchTest.runCount = count;
        benchTest.speed = parseFloat(benchTest.SerOpsSec) < parseFloat(benchTest.DeserOpsSec) ? benchTest.SerOpsSec : benchTest.DeserOpsSec;

        return benchTest;
    };

    function createRow(r, cellDatas){

        var payloadOrdered = WAVE.arrayWalkable(cellDatas).wWhere(function (d) { return d !== null && d.PayloadSize != 0; })
                                                          .wOrder(function (a, b) { return a.PayloadSize > b.PayloadSize ? 1 : a.PayloadSize < b.PayloadSize ? -1 : 0; })
                                                          .wToArray();
        var goldPayloadTest = payloadOrdered.length == 0 ? null : payloadOrdered[0];
        var silverPayloadTest = payloadOrdered.length == 0 ? null :
                            payloadOrdered.length == 1 ? payloadOrdered[0] : payloadOrdered[1];
        var bronzePayloadTest = payloadOrdered.length == 0 ? null :
                            payloadOrdered.length == 1 ? payloadOrdered[0] :
                            payloadOrdered.length == 2 ? payloadOrdered[1] : payloadOrdered[2];

        var speedOrdered = WAVE.arrayWalkable(cellDatas).wWhere(function (d) { return d !== null && d.speed != 0; })
                                                        .wOrder(function (a, b) { return a.speed < b.speed ? 1 : a.speed > b.speed ? -1 : 0; })
                                                        .wToArray();
        var goldSpeedTest = speedOrdered.length == 0 ? null : speedOrdered[0];
        var silverSpeedTest = speedOrdered.length == 0 ? null :
                          speedOrdered.length == 1 ? speedOrdered[0] : speedOrdered[1];
        var bronzeSpeedTest = speedOrdered.length == 0 ? null :
                          speedOrdered.length == 1 ? speedOrdered[0] :
                          speedOrdered.length == 2 ? speedOrdered[1] : speedOrdered[2];

        var tr = document.createElement('tr');
        tr.className = 'main-table-row';
        var th = document.createElement('th');
        th.className = 'main-table-row-header';
        var htmlTemplate =
            "<div class='row-header'>" +
                "<b>@testName@</b><br>@testType@<br><br>" +
                "<b>by speed:</b><br>" +
                "1. @goldSpeedTest@ (@goldSpeed@ ops/sec)<br>" +
                "2. @silverSpeedTest@ (@silverSpeed@ ops/sec)<br>" +
                "3. @bronzeSpeedTest@ (@bronzeSpeed@ ops/sec)<br><br>" +
                "<b>by payload:</b><br>" +
                "1. @goldPayloadTest@ (@goldPayload@ byte(s))<br>" +
                "2. @silverPayloadTest@ (@silverPayload@ byte(s))<br>" +
                "3. @bronzePayloadTest@ (@bronzePayload@ byte(s))<br>" +
            "<div>";
        th.innerHTML = WAVE.strHTMLTemplate(htmlTemplate,
            {
                testType: r.testType,
                testName: r.testName,
                goldSpeedTest: goldSpeedTest.SerializerName,
                silverSpeedTest: silverSpeedTest.SerializerName,
                bronzeSpeedTest: bronzeSpeedTest.SerializerName,
                goldPayloadTest: goldPayloadTest.SerializerName,
                silverPayloadTest: silverPayloadTest.SerializerName,
                bronzePayloadTest: bronzePayloadTest.SerializerName,
                goldSpeed: numberWithCommas(goldSpeedTest.speed, 0),
                silverSpeed: numberWithCommas(silverSpeedTest.speed, 0),
                bronzeSpeed: numberWithCommas(bronzeSpeedTest.speed, 0),
                goldPayload: numberWithCommas(goldPayloadTest.PayloadSize, 0),
                silverPayload: numberWithCommas(silverPayloadTest.PayloadSize, 0),
                bronzePayload: numberWithCommas(bronzePayloadTest.PayloadSize, 0)
            });
        tr.appendChild(th);

        return tr;
    }

    function prepareRowMetadata(cellDatas){

        var speedMin = null;
        var speedMax = null;
        var payloadMin = null;
        var payloadMax = null;
        WAVE.arrayWalkable(cellDatas).wEach(function (d) {
            
            if (d == null || d.PayloadSize == 0 || d.speed == 0)
                return;

            var speed = parseFloat(d.SerOpsSec) < parseFloat(d.DeserOpsSec) ? d.SerOpsSec : d.DeserOpsSec;
            if (speedMin == null || speedMin > speed)
                speedMin = speed;
            if (speedMax == null || speedMax < speed)
                speedMax = speed;
            if (payloadMin == null || payloadMin > d.PayloadSize)
                payloadMin = d.PayloadSize;
            if (payloadMax == null || payloadMax < d.PayloadSize)
                payloadMax = d.PayloadSize;
        });

        return { speedMin: speedMin, speedMax: speedMax, payloadMin: payloadMin, payloadMax: payloadMax };
    }

    function createTableCell(benchTest, tr, metaData) {

        var td = document.createElement('td');
        td.style.verticalAlign = 'top';

        // if there is no test - fill cell with empty (gray) space
        if (benchTest == null) {
            td.className = 'absent-test';
            tr.appendChild(td);
            return;
        }

        // cell styling 

        var serClass = JSON.parse(benchTest.SerSupported) ? "supported" : "unsupported";
        var deserClass = JSON.parse(benchTest.DeserSupported) ? "supported" : "unsupported";
        var runExceptionClass = benchTest.RunException == null ? "hidden" : "empty";
        var serExceptionsClass = benchTest.SerExceptions == 0 ? "hidden" : "empty";
        var serAbortsClass = benchTest.SerAborts == 0 ? "hidden" : "empty";
        var deserExceptionsClass = benchTest.DeserExceptions == 0 ? "hidden" : "empty";
        var deserAbortsClass = benchTest.DeserAborts == 0 ? "hidden" : "empty";

        var speedColor = getColor(metaData.speedMin, metaData.speedMax, benchTest.speed, true);
        var payloadColor = getColor(metaData.payloadMin, metaData.payloadMax, benchTest.PayloadSize, false);

        // populate cell with data

        var cellHeaderHtmlTemplate =
            "<div>" +
                "<table class='inner-table test-header-table'>" +
                    "<tr>" +
                        "<td class='stat-result' bgcolor='@speedColor@'><b>@prettySpeed@</b></td>" +
                        "<td class='stat-result' bgcolor='@payloadColor@'><b>@prettyPayloadSize@</b></td>" +
                    "</tr>" +
                    "<tr><td colspan='2'>" +
                        "<table class='inner-table'>" +
                        	"<tr>" +
                        		"<td>Run:</td>" +
                                "<td><b>@runNumber@</b> time(s)</td>" +
                        	"</tr>" +
                        	"<tr>" +
                        		"<td>Payload:</td>" +
                                "<td><b>@payloadSize@</b> byte(s)</td>" +
                                "</tr> " +
                        	"<tr>" +
                        		"<td>Speed:</td>" +
                        		"<td><b>@speed@</b> ops/sec</td>" +
                                "</tr>" +
                        	"<tr>" +
                        		"<td>GC:</td>" +
                        		"<td><b>@doGc@</b></td>" +
                        	"</tr>" +
                        "</table></td>" +
                    "</tr>" +
                "</table>" +
                "<div class='@runExceptionClass@'>RunException <b>@runException@</b></div>" +
            "</div>";

        var serDataHtmlTemplate =
            "<div class=\"@serClass@\">" +
                "<table class='inner-table'>" +
                    "<tr>" +
                        "<td align=\"center\"><b>Serialization</b></td>" +
                    "</tr>" +
                    "<tr class='@serExceptionsClass@'>" +
                        "<td>exceptions:</td>" +
                        "<td><b>@serExceptions@</b></td>" +
                    "</tr>" +
                    "<tr class='@serAbortsClass@'>" +
                        "<td>aborts:</td>" +
                        "<td><b>@serAborts@</b></td>" +
                    "</tr>" +
                    "<tr class='@serAbortsClass@'>" +
                        "<td>first error:</td>" +
                        "<td><b>@firstSerAbortMsg@</b></td>" +
                    "</tr>" +
                    "<tr>" +
                        "<td>iterations:</td>" +
                        "<td><b>@serIterations@</b></td>" +
                    "</tr>" +
                    "<tr>" +
                        "<td>duration (ms):</td>" +
                        "<td><b>@serDurationMs@</b></td>" +
                    "</tr>" +
                    "<tr>" +
                        "<td>ops/sec:</td>" +
                        "<td><b>@serOpsSec@</b></td>" +
                    "</tr>" +
                "</table>" +
            "</div>";

        var deserDataHtmlTemplate =
            "<div class=\"@deserClass@\"><table class='inner-table'>" +
                "<tr>" +
                    "<td align=\"center\"><b>Deserialization</b></td>" +
                "</tr>" +
                "<tr class='@deserExceptionsClass@'>" +
                    "<td>exceptions:</td>" +
                    "<td><b>@deserExceptions@</b></td>" +
                "</tr>" +
                "<tr class='@deserAbortsClass@'>" +
                    "<td>aborts:</td>" +
                    "<td><b>@deserAborts@</td>" +
                "</tr>" +
                "<tr class='@deserAbortsClass@'>" +
                    "<td>first error:</td>" +
                    "<td><b>@firstDeserAbortMsg@</b></td>" +
                "</tr>" +
                "<tr>" +
                    "<td>iterations:</td>" +
                    "<td><b>@deserIterations@</b></td>" +
                "</tr>" +
                "<tr>" +
                    "<td>duration (ms):</td>" +
                    "<td><b>@deserDurationMs@</b></td>" +
                "</tr>" +
                "<tr>" +
                    "<td>ops/sec:</td>" +
                    "<td><b>@deserOpsSec@</b></td>" +
                "</tr>" +
            "</table>" +
        "</div>";

        var htmlTemplate =
            "<div>" +
                cellHeaderHtmlTemplate +
                serDataHtmlTemplate +
                deserDataHtmlTemplate +
            "</div>";

        td.innerHTML = WAVE.strHTMLTemplate(htmlTemplate,
        {
            runNumber: numberWithCommas(benchTest.runCount, 0),
            prettyPayloadSize: benchTest.PayloadSize == 0 ? '-' : shortenByteSize(benchTest.PayloadSize),
            payloadSize: benchTest.PayloadSize == 0 ? '-' : numberWithCommas(benchTest.PayloadSize, 0),
            prettySpeed: benchTest.speed == 0 ? '-' : shortenQuantity(benchTest.speed),
            speed: benchTest.speed == 0 ? '-' : numberWithCommas(benchTest.speed, 0),
            payloadColor: payloadColor,
            speedColor: speedColor, 
            doGc: benchTest.DoGc,
            runExceptionClass: runExceptionClass,
            runException: benchTest.RunException,
            serClass: serClass,
            serIterations: numberWithCommas(benchTest.SerIterations, 0),
            serExceptionsClass: serExceptionsClass,
            serAbortsClass: serAbortsClass,
            serExceptions: numberWithCommas(benchTest.SerExceptions, 0),
            serAborts: numberWithCommas(benchTest.SerAborts, 0),
            serDurationMs: numberWithCommas(benchTest.SerDurationMs, 0),
            serOpsSec: numberWithCommas(benchTest.SerOpsSec, 0),
            firstSerAbortMsg: benchTest.FirstSerAbortMsg,
            deserClass: deserClass,
            deserIterations: numberWithCommas(benchTest.DeserIterations, 0),
            deserExceptionsClass: deserExceptionsClass,
            deserAbortsClass: deserAbortsClass,
            deserExceptions: numberWithCommas(benchTest.DeserExceptions, 0),
            deserAborts: numberWithCommas(benchTest.DeserAborts, 0),
            deserDurationMs: numberWithCommas(benchTest.DeserDurationMs, 0),
            deserOpsSec: numberWithCommas(benchTest.DeserOpsSec, 0),
            firstDeserAbortMsg: benchTest.FirstDeserAbortMsg
        });
        tr.appendChild(td);
    };

    function getColumnHeaderData(benchTest) {
        return { serializerType: benchTest.SerializerType, serializerName: benchTest.SerializerName };
    }

    function getRowHeaderData(benchTest) {
        return { testType: benchTest.TestType, testName: benchTest.TestName };
    };

    $(window).scroll(function () {
        
        arrangeColumnHeaders();
        arrangeRowHeaders();
    });

    function arrangeColumnHeaders (){

        var currentTopScroll = $(window).scrollTop();
        var topDelta = currentTopScroll - topOffset;
        if (topDelta < 0)
            topDelta = 0;

        columnHeaders.each(function () {
            $(this).css("top", topDelta);
        });
    };

    function arrangeRowHeaders() {

        var currentLeftScroll = $(window).scrollLeft();
        var leftDelta = currentLeftScroll - leftOffset;
        if (leftDelta < 0)
            leftDelta = 0;

        rowHeaders.each(function () {
            $(this).css("left", leftDelta);
        });
    };

    function getColor(max, min, value, reverse) {

        if (value == 0)
            return "lightgray";
        var normed = (value - min) * (speedColors.length - 1) / (max - min);
        var index = reverse ? speedColors.length - normed.toFixed() - 1 : normed.toFixed();

        return speedColors[index];
    }

</script>
